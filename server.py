from http.server import HTTPServer,BaseHTTPRequestHandler,HTTPStatus
from threading import Lock
import random
from io import BytesIO
import json
import threading
host1 = ("0.0.0.0",18899)
host2 = ("0.0.0.0",18900)
data = [10550, 10522, 10518, 10534, 10505, 10511, 10866, 10610, 10601, 10578, 10585, 10582, 10565, 10755, 11138, 11950, 10665, 11166, 11149, 11144, 11084, 11013, 10994, 10956, 10910, 10914, 10842, 10824, 10835, 10808, 10795, 10746, 11813, 11897, 11672, 11214, 11951, 11210, 11173, 11152, 11142, 11153, 11147, 11146, 11130, 11116, 11080, 11088, 11082, 11069, 11100, 11063, 11944, 11064, 11047, 11057, 11055, 11031, 11006, 11014, 11048, 11941, 10978, 10999, 10999, 10980, 10939, 10950, 10940, 10943, 10911, 10925, 10918, 10848, 10807, 10868, 10850, 10865, 10840, 10852, 10821, 10822, 10832, 10830, 10917, 10801, 10817, 10801, 10817, 10818, 10789, 10783, 10810, 10763, 10767, 10769, 10721, 10744, 10710, 10705, 10697, 10656, 10622, 10661, 10640, 10622, 10661, 10646, 10660, 10626, 10605, 10603, 10602, 10572, 10556, 10566, 10548, 10520, 10508, 10509, 11867, 11922, 11920, 11794, 11879, 11660, 11870, 11870, 11869, 11902, 11756, 11364, 11802, 11388, 11840, 11388, 11387, 11841, 11814, 11853, 11390, 11786, 11784, 11785, 11784, 11825, 11782, 11783, 11789, 11765, 11804, 11707, 11757, 11392, 11758, 11393, 11796, 11851, 10503, 10502, 11768, 11674, 11780, 10499, 11394, 11759, 11728, 11719, 10496, 11720, 10493, 10485, 10483, 10486, 10469, 11774, 10470, 11773, 11763, 10460, 11560, 10461, 11396, 11730, 11397, 11709, 11684, 11640, 11588, 11692, 11691, 11689, 11414, 11688, 11686, 11693, 11696, 11673, 11669, 11629, 11680, 11557, 11589, 11642, 11623, 11631, 11399, 11634, 11670, 11507, 11612, 11632, 11599, 11648, 11461, 11370, 11509, 11549, 11558, 11652, 11564, 11615, 11523, 11570, 11574, 11572, 11573, 11618, 11575, 11576, 11524, 11577, 11541, 11535, 11539, 11537, 11538, 11542, 11536, 11578, 11445, 11457, 11340, 11463, 11585, 11464, 11532, 11450, 11455, 11441, 11313, 11501, 11496, 11497, 11458, 11435, 11489, 11506, 11421, 11459, 11429, 10516, 11342, 11268, 11347, 11433, 11373, 11430, 11436, 11314, 11426, 11350, 11352, 11351, 11348, 11353, 11356, 11359, 11237, 11260, 11343, 11242, 11255, 11191, 11172, 11122, 11111, 11076, 11943, 11942, 11062, 11049, 11036, 11024, 11033, 10976, 10961, 10905, 10898, 10863, 10844, 10831, 10841, 10720, 10696, 10708, 10627, 11596, 11638, 11815, 11892, 11884, 11751, 11790, 11776, 11808, 11597, 11827, 11795, 11729, 11797, 11805, 10495, 10500, 10492, 10491, 10465, 10463, 10462, 11769, 11708, 11770, 11655, 11675, 11522, 11604, 11643, 11626, 11591, 11249, 11602, 11505, 11582, 11415, 11366, 11490, 11487, 11374, 11383, 11315, 11275, 11279, 11266, 11175, 11896, 11156, 11141, 11104, 11071, 11052, 11043, 11019, 11026, 10983, 10942, 10904, 10915, 10919, 10934, 10932, 10869, 10854, 10846, 10819, 10787, 10748, 10757, 10726, 10706, 10691, 10685, 10689, 10683, 10694, 10672, 10655, 10650, 10663, 10663, 10634, 10612, 10529, 10545, 11755, 11868, 11850, 11850, 11734, 11859, 11889, 11563, 11778, 11824, 11389, 11788, 11639, 11779, 10489, 10466, 10467, 10450, 11690, 11687, 11695, 11622, 11667, 11633, 11420, 11462, 11527, 11531, 11494, 11422, 11355, 11375, 11288, 11139, 11143, 11117, 11611, 11051, 11016, 10913, 10887, 10857, 10853, 10847, 10798, 10779, 10771, 10743, 10759, 10716, 10739, 10680, 10695, 10688, 10681, 10666, 10651, 10604, 10618, 10564, 10553, 10571, 10558, 11386, 11921, 11764, 11917, 11852, 11677, 11703, 11882, 11820, 11866, 11391, 11365, 11722, 11810, 11723, 11798, 11654, 10497, 10478, 10471, 10468, 10449, 11678, 11721, 11641, 11641, 11704, 11613, 11697, 11630, 11710, 11644, 11647, 11605, 11590, 11614, 11559, 11609, 11565, 11504, 11550, 11583, 11470, 11495, 11341, 11466, 11358, 11423, 11360, 11287, 11671, 11216, 11187, 11170, 11162, 11131, 11110, 11086, 11424, 11109, 11103, 11085, 11939, 11940, 11045, 11045, 11402, 11042, 11306, 11005, 10982, 10959, 11259, 10944, 10893, 10892, 10885, 10849, 10859, 10862, 10861, 10860, 10851, 10858, 10395, 11662, 11663, 11752, 11733, 11753, 11830, 11665, 11666, 10464, 10454, 11606, 11712, 11717, 11716, 11714, 11607, 11567, 11694, 11608, 11568, 11701, 11699, 11700, 11705, 11656, 11657, 11659, 11657, 11649, 11650, 11543, 11544, 11546, 11545, 11486, 11485, 11484, 11483, 11488, 11380, 11382, 11428, 11384, 11272, 11271, 11274, 11273, 11276, 11278, 11277, 11136, 11106, 10773, 10754, 10568, 10474, 10448, 11715, 11212, 11206, 11197, 11163, 11188, 11150, 11400, 11401, 11025, 11021, 11009, 10895, 10946, 10953, 10952, 11267, 10886, 10897, 11065, 10896, 11065, 10855, 10539, 10531, 10528, 11906, 11828, 10498, 10456, 11698, 11685, 11646, 11645, 11625, 11668, 11616, 11627, 11610, 11595, 11469, 11510, 11513, 11511, 11514, 11518, 11479, 11446, 11519, 11520, 11498, 11480, 11521, 11451, 11491, 11482, 11467, 11452, 11453, 11448, 11454, 11349, 11379, 11427, 11425, 11404, 11405, 11376, 11369, 11305, 11250, 11285, 11270, 11245, 11246, 11247, 11222, 11167, 10692, 10643, 11748, 11747, 11750, 11749, 10482, 10484, 10455, 10458, 10388, 11099, 11096, 11070, 11946, 11027, 11008, 10788, 10806, 10764, 10768, 10752, 11807, 11661, 11833, 11848, 11849, 11826, 11603, 11571, 11540, 11711, 11706, 11528, 10704, 11679, 11398, 11726, 11569, 11493, 11381, 10899, 10884, 10879, 10880, 10805, 10598, 10594, 10596, 10595, 10574, 11816, 11664, 10480, 10459, 10446, 11525, 11220, 11217, 11126, 11107, 11090, 11077, 11081, 11949, 11023, 11011, 11000, 11007, 10995, 10969, 10973, 10923, 10891, 10812, 10422, 10718, 11213, 10963, 10960, 10949, 10938, 11074, 11028, 11039, 11017, 10993, 10813, 10829, 10762, 10742, 11221, 11211, 11112, 11089, 11945, 10916, 11318, 10699, 11417, 10933, 10921, 10782, 10617, 10583, 10583]

back_data = {}
n = 5   #一次发送的任务个数
rlock = Lock()
wlock = Lock()
class TPost(threading.Thread):
    def run(self):
        server = HTTPServer(host1,Post)
        server.serve_forever()
class TGet(threading.Thread):
    def run(self):
        server = HTTPServer(host2,Get)
        server.serve_forever()

class Post(BaseHTTPRequestHandler):
    def do_POST(self):
        global wlock
        wlock.acquire()
        if self.path == "/senddata":
            global back_data
            content_length = int(self.headers["Content-Length"])
            body = self.rfile.read(content_length)
            try:
                ebookId = json.loads(body)['data']['data'][0]['ebookId']
                with open(str(ebookId) + ".json","wb") as f:
                    f.write(body)
                back_data.pop(ebookId)
            except:
                pass
            self.send_response(HTTPStatus.OK)
            self.end_headers()
            self.wfile.write(bytes("OK",encoding="utf8"))
        wlock.release()

class Get(BaseHTTPRequestHandler):
    def do_GET(self):
        global data
        global back_data
        global rlock
        global wlock
        respone_text = ""
        rlock.acquire()
        if self.path == "/gettask":
            try:
                for i in range(n):
                    #按照优先级获取任务
                    d = data.pop(0)
                    respone_text += str(d) + " "
                    wlock.acquire()
                    back_data.update({d:d}) #标记已发送的任务，如果用户下载完成并且传回任务，这个字典里的书籍id会被删除
                    wlock.release()
            except:
                respone_text = "clear"

        self.send_response(HTTPStatus.OK)
        self.send_header("Content-type","text/html")
        self.end_headers()
        self.wfile.write(bytes(respone_text,encoding="utf8"))
        rlock.release()

g = TGet()
p = TPost()
g.start()
p.start()
g.join()
p.join()
s = json.dumps(back_data,ensure_ascii=False)
open("back_data.json","w").write(s)